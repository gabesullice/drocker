#!/bin/bash

set -e

script_name=$(basename $0)

# Define container and networking defaults
project_name=$(basename $PWD | sed 's/-//g' | sed 's/_//g')
drupal_cli_image=gabesullice/drocker-drupal-cli
mysql_container=$(printf "%b%b" $project_name "_mysql_1")
drupal_container=$(printf "%b%b" $project_name "_drupal_1")
docker_network=$(printf "%b%b" $project_name "_default")

main () {
  local subcmd=$1
  local args=${@:2}

  if [ $# -lt 1 ]; then
    error "You must provide at least one subcommand. See \`$script_name help\` for more info."
    subcmd="help"
  fi

  if [ "$subcmd" = "help" ]; then
    local commands=( "sql-import" "permissions" "drush" "sqlc" "shell" "connect" )
    printf "Possible subcmds are:\n"
    printf "\t%s\n" "${commands[@]}"
    printf "For more information about these commands, see %b [SUBCMD] help.\n" $script_name
    exit 1
  fi

  configure

  $subcmd $args
}

configure () {
  local arg=$1

  if [ "$1" = "help" ]; then
    printf "Usage: %b %b [\e[4mENVIRONMENT FILE\e[0m]\n" $script_name $FUNCNAME
    printf "Overrides drocker's configuration with the environment variables in \e[4mENVIRONMENT FILE\e[0m. If no argument is passed, the default is ./.drocker.\n"
    exit 0
  fi

  local config_file=$(find_config)

  if [[ -f $config_file ]]; then
    source $config_file
    project_name=${DROCKER_PROJECT_NAME:=$project_name}
    drupal_cli_image=${DROCKER_CLI_IMAGE:=$drupal_cli_image}
    mysql_container=${DROCKER_MYSQL_CONTAINER:=$mysql_container}
    drupal_container=${DROCKER_DRUPAL_CONTAINER:=$drupal_container}
    docker_network=${DROCKER_DOCKER_NETWORK:=$docker_network}
  fi
}

drush () {
  local args=${@:1}

  if [ "$1" = "help" ]; then
    printf "Usage: %b %b [...drush args]\n" $script_name $FUNCNAME
    printf "Use as you would regular drush. This command simply prefixes the drush command with the appropriate docker command.\n"
    exit 0
  fi

  log "docker run --user=$(id -u) --rm -i --volumes-from=$drupal_container --net=$docker_network $drupal_cli_image drush $args"

  docker run --user=$(id -u) --rm -i --volumes-from=$drupal_container --net=$docker_network $drupal_cli_image drush $args
}

sqlc () {
  local args=${@:1}

  if [ "$1" = "help" ]; then
    printf "Usage: %b %b\n" $script_name $FUNCNAME
    printf "Use as you would drush sqlc.\n"
    exit 0
  fi

  log "docker exec --user=$(id -u) -it $mysql_container /bin/bash -c 'mysql -A -u \$MYSQL_USER -p\$MYSQL_PASSWORD \$MYSQL_DATABASE'"

  docker exec --user=$(id -u) -it $mysql_container /bin/bash -c 'mysql -A -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE'
}

shell () {
  local args=${@:1}

  if [ "$1" = "help" ]; then
    printf "Usage: %b %b [shell command]\n" $script_name $FUNCNAME
    printf "Run arbitrary commands in the drocker container. This command simply prefixes the your shell command with the appropriate docker command. You will need to escape any quotes with a \\.\n"
    exit 0
  fi

  log "docker run --rm -i --volumes-from=$drupal_container --net=$docker_network $drupal_cli_image /bin/ash -c '$args'"

  docker run --rm -i --volumes-from=$drupal_container --net=$docker_network $drupal_cli_image /bin/ash -c "$args"
}

sql-import () {
  if [ "$1" = "help" ]; then
    printf "Usage: %b %b \e[4mFILE\e[0m\n" $script_name $FUNCNAME
    printf "Imports the given SQL file into the running instance of drocker. Must not be gzipped.\n"
    exit 0
  fi

  log "docker run --rm -i --volumes-from=$drupal_container --net=$docker_network $drupal_cli_image drush sql-cli < $1"

  docker run --rm -i --volumes-from=$drupal_container --net=$docker_network $drupal_cli_image drush sql-cli < $1
}

permissions () {
  local args=${@:1}

  if [ "$1" = "help" ]; then
    printf "Usage: %b %b\n" $script_name $FUNCNAME
    printf "This will set permissions correctly for php-fpm and nginx within the docker container."
    exit 0
  fi

  docker run --rm -i --volumes-from=$drupal_container --net=$docker_network $drupal_cli_image /bin/ash -c "\
    mkdir -p /var/www/html /var/www/private /var/www/settings /var/www/files \
    && chown -R $(id -u):www-data /var/www/html /var/www/private /var/www/settings /var/www/files \
    && find /var/www/html /var/www/settings -type d -exec chmod 755 {} \+ \
    && find /var/www/html /var/www/settings -type f -exec chmod 744 {} \+ \
    && find /var/www/files /var/www/private -type d -exec chmod 775 {} \+ \
    && find /var/www/files /var/www/private -type f -exec chmod 764 {} \+ \
    && settingsFile=/var/www/html/sites/default/settings.php && if [[ -e \$settingsFile ]]; then chmod 644 \$settingsFile; fi\
    && settingsFile=/var/www/html/sites/default/services.yml && if [[ -e \$settingsFile ]]; then chmod 644 \$settingsFile; fi\
    && settingsFile=/var/www/html/sites/default/settings.local.php && if [[ -e \$settingsFile ]]; then chmod 644 \$settingsFile; fi\
    && settingsFile=/var/www/html/sites/default/local-settings.inc && if [[ -e \$settingsFile ]]; then chmod 644 \$settingsFile; fi"
}

connect () {
  if [ "$1" = "help" ]; then
    printf "Usage: %b %b\n" $script_name $FUNCNAME
    printf "Starts an SSH session in docker drush container.\n"
    exit 0
  fi

  log "docker run --rm -it --volumes-from=$drupal_container --net=$docker_network $drupal_cli_image /bin/ash -l"

  docker run --rm -it --volumes-from=$drupal_container --net=$docker_network $drupal_cli_image /bin/ash -l
}

find_config () {
  local cwd=$(pwd)
  local config_file=""

  while [[ $cwd != "/" ]]; do
    if [[ -e $cwd/.drocker ]]; then
      config_file=$cwd/.drocker
      break
    fi
    cwd=$(dirname $cwd)
  done;

  if [[ -z $config_file ]]; then
    error "Could not locate a .drocker config file. Falling back to defaults..."
    exit 1
  else
    echo $config_file
  fi
}

log () {
  (>&2 echo "$1")
}

error () {
  (>&2 echo -e "\e[31m$1\e[0m")
}

main $@
